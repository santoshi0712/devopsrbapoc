# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

#pool:
#  vmImage: ubuntu-latest

pool:
  name: Azure-Infra_Pool

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'
  condition: 
  
# - task: DownloadSecureFile@1
#   name: certificate
#   inputs:
#     secureFile: mypoc.crt
# - script: |
#     mkdir -p $(System.DefaultWorkingDirectory)/trust/private
#     cp $(certificate.secureFilePath) $(System.DefaultWorkingDirectory)/trust/private
#     echo$(System.DefaultWorkingDirectory)/trust/private
#     git clone https://github.com/ayushigupta-12/devopsrbapoc

# - task: DownloadSecureFile@1
#   name: privatekey
#   inputs:
#     secureFile: mykey.key
# - script: |
#     cp $(privateKey.secureFilePath) $(System.DefaultWorkingDirectory)/trust/private
#     echo $(System.DefaultWorkingDirectory)/trust/private

- task: Docker@2
  inputs:
    containerRegistry: 'acr-connection'
    command: 'login'

- script: echo Hello, world!
    git clone https://github.com/santoshi0712/devopsrbapoc.git

- task: Docker@2
  inputs:
    containerRegistry: jfrogrepo
    repository: 'docker-scan-repo/$(Build.Repository.Name)'
    command: 'build'
    Dockerfile: 'dockerfile1'
    arguments: '--disable-content-trust=false'
    tags:  $(Build.BuildId)

- task: Docker@2
  inputs:
    command: push
    containerRegistry: jfrogrepo
    repository: docker-scan-repo/$(Build.Repository.Name)
    tags: $(Build.BuildId)

- task: JFrogPublishBuildInfo@1
  inputs:
    artifactoryConnection: 'Jfrog-CE'
    buildName: 'docker-scan-repo/$(Build.Repository.Name)'
    buildNumber: '$(Build.BuildId)'

# - task: ArtifactoryPublishBuildInfo@1
#   inputs:
#     artifactoryService: 'artifactorysvc'
#     buildName: docker-scan-repo/$(Build.Repository.Name)
#     buildNumber: $(Build.BuildId)
    
# - task: ArtifactoryXrayScan@1
#   inputs:
#     artifactoryService: artifactorysvc
#     buildName: docker-scan-repo/$(Build.Repository.Name)
#     buildNumber: $(Build.BuildId)
#     allowFailBuild: true

- task: JFrogBuildScan@1
  inputs:
    xrayConnection: 'jxray_svc'
    buildName: docker-scan-repo/$(Build.Repository.Name)
    buildNumber: $(Build.BuildId)
    allowFailBuild: true
    vuln: false

# - script: 
#     docker tag devopsrbapocjfrog.jfrog.io/docker-scan-repo/$(Build.Repository.Name):$(Build.BuildId) acr5000.azurecr.io/docker-scan-repo/$(Build.Repository.Name):$(Build.BuildId) 
#     echo $(System.DefaultWorkingDirectory)
#     cd $(System.DefaultWorkingDirectory)/trust/private
#     chmod 600 mykey.key
#     export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="tcspoc123"
#     docker trust key load mykey.key --name tcspoc
#     az acr login -n acr5000.azurecr.io
#     export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE="tcspoc123"
#     export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE="tcspoc123"
#     docker trust signer add --key mypoc.crt tcspoc acr5000.azurecr.io/docker-scan-repo/$(Build.Repository.Name):$(Build.BuildId)
#     ls
#     pwd
#     docker trust inspect --pretty acr5000.azurecr.io/docker-scan-repo/$(Build.Repository.Name):$(Build.BuildId)
#     #Repo_Key=`docker trust inspect --pretty acr5000.azurecr.io/$(Build.Repository.Name):$(Build.BuildId) | grep "Repository Key" | awk '{print $3}'`
#     #docker trust key load $Repo_Key
     
    
    
# - task: Docker@2
#   inputs:
#     containerRegistry: 'app_acr_registry_service_connection'
#     repository: docker-scan-repo/$(Build.Repository.Name)
#     command: 'push'
#     tags: '$(Build.BuildId)'
#   env:
#     DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: tcspoc123
